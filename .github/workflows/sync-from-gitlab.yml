name: Sync from GitLab

# Explicitly define permissions for GITHUB_TOKEN
permissions:
  contents: write

on:
  # Run this workflow every day at midnight
  schedule:
    - cron: '0 0 * * *'
  # Allow manual triggering
  workflow_dispatch:

jobs:
  sync-from-gitlab:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout GitHub repository
        uses: actions/checkout@v4

      - name: Set up Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

      - name: Clone GitLab repository
        run: |
          echo "Attempting to clone GitLab repository..."
          # Use -v for verbose output to help diagnose issues
          git clone -v --depth 1 https://gitlab.com/mcalec-dev/mcalec.dev.git temp-gitlab-repo
          
          # Check if clone was successful
          if [ ! -d "temp-gitlab-repo" ]; then
            echo "ERROR: GitLab repository cloning failed!"
            echo "Trying alternative URL format..."
            git clone -v --depth 1 https://gitlab.com/mcalec-dev/mcalec.dev temp-gitlab-repo-alt
            
            if [ -d "temp-gitlab-repo-alt" ]; then
              echo "Alternative URL worked, renaming directory"
              mv temp-gitlab-repo-alt temp-gitlab-repo
            else
              echo "Both clone attempts failed. Exiting."
              exit 1
            fi
          fi
          
          echo "Repository cloned successfully"
          ls -la temp-gitlab-repo/

      - name: Debug repository structure
        run: |
          if [ ! -d "temp-gitlab-repo" ]; then
            echo "ERROR: temp-gitlab-repo directory not found after clone step"
            ls -la
            exit 1
          fi
          
          echo "Listing the root content of the GitLab repository:"
          ls -la temp-gitlab-repo/
          
          echo "Full directory structure of the cloned repository:"
          find temp-gitlab-repo -type d | sort
          
          echo "Searching for 'public' directory in any location:"
          find temp-gitlab-repo -type d -name "public" | tee public-dirs.txt

      - name: Prepare GitHub repository
        run: |
          # Remove everything except .git folder and GitHub workflow files
          echo "Cleaning GitHub repository..."
          find . -mindepth 1 -not -path "./.git*" -not -path "./temp-gitlab-repo*" -not -path "./public-dirs.txt" -delete
          echo "Repository cleaned"

      - name: Copy files to GitHub repository
        run: |
          if [ ! -d "temp-gitlab-repo" ]; then
            echo "ERROR: temp-gitlab-repo directory not found"
            ls -la
            exit 1
          fi
          
          # Check if we found any public directories
          if [ -s "public-dirs.txt" ]; then
            # Use the first public directory found
            PUBLIC_DIR=$(head -n 1 public-dirs.txt)
            echo "Found public directory at: $PUBLIC_DIR"
            
            if [ -d "$PUBLIC_DIR" ] && [ -n "$(ls -A $PUBLIC_DIR 2>/dev/null)" ]; then
              echo "Copying files from $PUBLIC_DIR"
              cp -R "$PUBLIC_DIR"/* .
              echo "Files copied successfully"
            else
              echo "Public directory is empty or not accessible"
              echo "Synced from GitLab at $(date)" > README.md
            fi
          else
            echo "No public directory found, copying from repository root"
            cp -R temp-gitlab-repo/* .
            echo "Files copied from repository root"
          fi
          
          echo "Final content of GitHub repository:"
          ls -la

      - name: Clean up
        run: |
          rm -rf temp-gitlab-repo public-dirs.txt
          echo "Temporary files cleaned up"

      - name: Commit and push changes
        run: |
          git add .
          
          # Only commit and push if there are changes
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Sync files from GitLab repository"
            
            # Try different push methods if one fails
            echo "Attempting push with default token..."
            if ! git push; then
              echo "Default push failed, trying alternative method..."
              
              # Alternative 1: Use GITHUB_TOKEN explicitly
              git remote set-url origin https://x-access-token:${{ github.token }}@github.com/${{ github.repository }}.git
              if ! git push; then
                echo "Alternative 1 failed, trying PAT if available..."
                
                # Alternative 2: Use PAT if available
                if [ -n "${{ secrets.PAT }}" ]; then
                  git remote set-url origin https://${{ github.actor }}:${{ secrets.PAT }}@github.com/${{ github.repository }}.git
                  git push
                else
                  echo "No PAT available and other methods failed. Push unsuccessful."
                  exit 1
                fi
              fi
            fi
            
            echo "Changes committed and pushed"
          fi
